name: Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Label of the container job
  container-job:
    name: Install and Configure PostgreSQL and Run Flyway Scripts
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Create PostgreSQL Database
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U postgres -c "CREATE DATABASE restaurante;" 
    
      - name: Install Flyway CLI
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/8.5.6/flyway-commandline-8.5.6-linux-x64.tar.gz | tar xvz && \
          sudo mv flyway-8.5.6 /opt/flyway && \
          sudo ln -s /opt/flyway/flyway /usr/local/bin/flyway
          
      - name: Run Flyway Migrations
        run: flyway -url=jdbc:postgresql://localhost:5432/restaurante -user=postgres -password=${{ secrets.POSTGRES_PASSWORD }} -locations=filesystem:src/main/resources/db migrate

      #- name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
       # run: node client.js
        # Environment variable used by the `client.js` script to create
        # a new PostgreSQL client.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432

  
  tests:
    needs: container-job
    name: Run Unit tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt-hotspot'
        cache: maven
    - name: Build with Maven
      run: mvn -B test --file pom.xml

  build:
    needs: tests
    name: Build maven package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt-hotspot'
          cache: maven
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Build package jar
        run: mvn -B package -DskipTests --file pom.xml
      - name: Upload .jar
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: /target/tech-challenge-pos-tech.jar

  deploy:
    needs: build
    name: Deploy on AWS Elastic Beanstall
    runs-on: ubuntu-latest
    steps:
      - name: Download jar
        uses: actions/download-artifact@v2
        with:
          name: artifact
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: true
          wait_for_environment_recovery: 120
          application_name: tech-challenge-pos-tech
          environment_name: Appspringboot-env
          version_label: latest-${{github.sha}}
          region: us-east-1
          deployment_package: tech-challenge-pos-tech.jar

