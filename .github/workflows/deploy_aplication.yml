 name: Build and Deploy API

 on:
   #pull_request:
   push:
      branches: [ main ]
        
 jobs:
   build:
     runs-on: ubuntu-latest
     steps:
       - name: Configure AWS Credentials
         run: |
           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       
       - name: Checkout Code
         uses: actions/checkout@v3
       
       - name: Install AWS CLI
         run: |
           sudo apt-get update
           sudo apt-get install -y awscli
      
       - name: Download Environment Variable
         run: |
           aws s3 cp s3://${{ secrets.AWS_BUCKET }}/${{ secrets.AWS_S3_BUCKET_SOURCE_DB }} download.txt
           RDS_ENDPOINT=$(cat download.txt)
           echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
         env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}  

       # - name: Print Environment Variable
       #   run: echo $RDS_ENDPOINT
       #   shell: bash

       - name: Setup Java
         uses: actions/setup-java@v3
         with:
           distribution: 'temurin'
           java-version: '17'

       - name: Build Project
         run: mvn clean install -DskipTests

       - name: Login Docker Hub
         run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

       - name: Build Docker Image
         run: docker build --build-arg DB_ENDPOINT=$RDS_ENDPOINT -t ${{ secrets.DOCKER_IMAGE }} .

       - name: Push Image Docker
         run: docker push ${{ secrets.DOCKER_IMAGE }}

   deploy:
     runs-on: ubuntu-latest
     needs: build
     steps:
       - name: Set Up AWS Credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

       - name: Install kubectl
         run: |
           curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
           chmod +x ./kubectl
           sudo mv ./kubectl /usr/local/bin/kubectl

       - name: Update EKS Kubeconfig
         run: |
           aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ secrets.CLUSTER_NAME_EKS }}

       - name: Apply Kubernetes Configuration
         run: kubectl apply -f k8s/
